/*
 * 
 *		Champion Event Handler
 *			Assigns newly spawned monsters a champion
 *			Controller that alters stats and behaviour
 *
 */

class champion_CHExtraToken : Inventory { default { inventory.MaxAmount 1; } } 

class champion_CHExtraIcon : Actor
	{
	default
		{
		+NOINTERACTION;
		+NOGRAVITY;
		+BRIGHT;
		RenderStyle "Translucent";
		scale 0.66;
		}

	override void Tick()
		{
		super.Tick();
		
		if(master && master.health > 0)
			A_Warp(AAPTR_MASTER, yofs:-8.0, flags:WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION, heightoffset: 1.1);
		else
			destroy();
		}
	
	states
		{
		Spawn:
			//"####" "#" 0;
			"####" "#" 1;
			wait;
		}
	}


// colorful hell stuff

class champion_CHExtra : EventHandler
	{
	bool ch_extra;
	
	override void WorldLoaded(WorldEvent e)
		{
		ch_extra = champion_Static.champion_ReturnCVAR("champion_CHextra");
		}

	override void WorldThingSpawned(WorldEvent e)
		{
		if(!ch_extra)
			return;
			
		string classname = "ColorTierIconCH";
		class<Actor> cls = classname;
		
		if(cls && e.Thing is cls)
			{
			
			actor parent = e.Thing.RoughMonsterSearch(1);
			
			if(parent)
				{
				e.Thing.Target = parent;
				e.Thing.A_SetRenderStyle(0.0,STYLE_NONE);
				if(e.Thing.Target.CountInv("champion_CHExtraToken"))
					{
					}
				else
					{
					e.Thing.Target.GiveInventory("champion_CHExtraToken",1);
					e.Thing.SetStateLabel("Show");
					let icon = e.Thing.Target.Spawn("champion_CHExtraIcon", e.Thing.Pos);
					if(icon)
						{
						icon.master = e.Thing.Target;
						icon.sprite = e.Thing.Sprite;
						icon.frame = e.Thing.Frame;
						}
					}
				e.Thing.Destroy();
				}
			}
		}
	}

class champion_Handler : EventHandler
	{
	
	static const name champion_WeightVars_Colours[]=
		{
		'champion_weight_DarkRed',
		'champion_weight_Red',
		'champion_weight_Orange',
		'champion_weight_Yellow',
		'champion_weight_DarkGreen',
		'champion_weight_Green',
		'champion_weight_Cyan',
		'champion_weight_Blue',
		'champion_weight_Indigo',
		'champion_weight_Violet',
		'champion_weight_Pink', 
		'champion_weight_Black', 
		'champion_weight_Grey',
		'champion_weight_White',
		'champion_weight_Bronze', 
		'champion_weight_Silver',
		'champion_weight_Gold'
		};
	
	static const name champion_WeightVars_Mutations[] = 
		{
		'champion_weight_Titan',
		'champion_weight_Undying',
		'champion_weight_Ghost',
		'champion_weight_Balloon',
		'champion_weight_Hybrid'
		};
		
	static const class<thinker> champion_Controllers[] =
		{
		"champion_DarkRedController",
		"champion_RedController",
		"champion_OrangeController",
		"champion_YellowController",
		"champion_DarkGreenController",
		"champion_GreenController",
		"champion_CyanController",
		"champion_BlueController",
		"champion_IndigoController",
		"champion_VioletController",
		"champion_PinkController",
		"champion_BlackController",
		"champion_GreyController",
		"champion_WhiteController",
		"champion_BronzeController",
		"champion_SilverController",
		"champion_GoldController"
		};
	
	static const int champion_Mutations[] = 
		{
		mutation_Titan,
		mutation_Undying,
		mutation_Ghost,
		mutation_Balloon,
		mutation_Hybrid
		};
	
	static const string champion_MutationsName[]=
		{
		"mutation_Titan",
		"mutation_Undying",
		"mutation_Ghost",
		"mutation_Balloon",
		"mutation_Hybrid"
		};
	
	array<class<Thinker> > 	champion_WeightedColours;
	array<int>				champion_WeightedMutations;
	
	int champion_ControllerID(name controller)
		{
		for(int i; i < champion_Controllers.Size(); i++)
			{
			if(controller == champion_Controllers[i].GetClassName())
				return i;
			}
		return 0;
		}
	
	void champion_PushWeightColours(int pos)
		{
		int 			i = 0;
		name		 	v = champion_WeightVars_Colours[pos];
		class<thinker> 	p = champion_Controllers[pos];
		for(i; i < champion_Static.champion_ReturnCVAR(v); i++)
			{
			champion_WeightedColours.Push(p);
			}
		//console.printf("pushed %d of %s to weighted colours array", i, p.GetClassName());
		}
		
	void champion_PushWeightMutations(int pos)
		{
		int 			i = 0;
		name		 	v = champion_WeightVars_Mutations[pos];
		int				p = champion_Mutations[pos];
		for(i; i < champion_Static.champion_ReturnCVAR(v); i++)
			{
			champion_WeightedMutations.Push(p);
			}
		//console.printf("pushed %d of %s to weighted mutations array", i,champion_MutationsName[pos]);
		}
		
	void champion_BuildWeightedArray(void)
		{
		//console.printf("c init");
		if(champion_static.champion_ReturnCVAR("champion_debug_forced") != -1)
			{
			champion_WeightedColours.Push(champion_Controllers[champion_static.champion_ReturnCVAR("champion_debug_forced")]);
			return;
			}
			
		for(int i = 0; i < champion_WeightVars_Colours.Size(); i++)
			{
			champion_PushWeightColours(i);
			}
			
		for(int k = 0; k < champion_WeightedColours.Size(); k++)
			{
			//console.Printf("%s", champion_WeightedColours[k].GetClassName());
			}
		//console.printf("colours array built with %d indexes", champion_WeightedColours.Size());
		}
		
	void champion_BuildMutationArray(void)
		{
		//console.printf("m init");
		for(int i = 0; i < champion_WeightVars_Mutations.Size(); i++)
			{
			champion_PushWeightMutations(i);
			}
			
		for(int k = 0; k < champion_WeightedMutations.Size(); k++)
			{
			int amt = champion_WeightedMutations[k];
			//console.Printf("%s", champion_MutationsName[amt]);
			}
		//console.printf("mutations array built with %d indexes", champion_WeightedMutations.Size());
		}		
	
	bool colours;
	bool icons;
	bool particles;
	bool bundles;
	bool friendlies;
	bool creepyMissiles;
	
	bool missilecolour;
	bool bloodcolour;
	
	double icon_scale;
	double icon_alpha;
	
	string ice_trans;
	
	bool legend;
	bool ld_boost;
	bool ld_dormant;
	bool ld_additive;
	
	int mutationchance;
	
	override void WorldLoaded(WorldEvent e)
		{
		champion_BuildWeightedArray();
		champion_BuildMutationArray();
		
		colours 		= champion_Static.champion_ReturnCVAR("champion_Colours");
		icons 			= champion_Static.champion_ReturnCVAR("champion_Icons");
		particles 		= champion_Static.champion_ReturnCVAR("champion_Particles");
		bundles 		= champion_Static.champion_ReturnCVAR("champion_Bundles");
		mutationchance	= champion_Static.champion_ReturnCVAR("champion_Mutations");
		missilecolour 	= champion_Static.champion_ReturnCVAR("champion_MissileColours");
		bloodcolour 	= champion_Static.champion_ReturnCVAR("champion_BloodColours");
		friendlies 		= champion_static.champion_returnCVAR("champion_friendlies");
		creepyMissiles	= champion_static.champion_returnCVAR("champion_ProjectileCreep");
		
		if(champion_Static.champion_LegendoomCheck())
			{
			legend 		= true;
			ld_dormant	= champion_Static.champion_ReturnCVAR("champion_Dormant");
			ld_boost	= champion_Static.champion_ReturnCVAR("champion_Booster");
			ld_additive = champion_Static.champion_ReturnCVAR("LD_legendarynightmare");
			}
		
		icon_scale	= champion_Static.champion_ReturnCVARFloat("champion_IconScale");
		icon_alpha	= champion_Static.champion_ReturnCVARFloat("champion_IconAlpha");
		
		ice_trans 	= champion_Static.champion_ReturnCVARFloat("champion_IceColour") ? "champion_Ice" : "Ice";
		
		}
		
	override void PlayerEntered(playerEvent e)
		{
		PlayerInfo player = players[e.PlayerNumber];
		
		if(player)
			{
			player.mo.Species = 'succ';
			}
		}
		
	Override void WorldThingSpawned(WorldEvent e)
		{
		if(e.Thing && e.Thing.bMISSILE && e.Thing.Target && e.Thing.Target.CountInv("champion_PersistentInfo") && missilecolour)
			{
			
			if(e.Thing.Target.Health < 1) 
				return;
			
			string classname = "ColorTierIconCH";
			class<Actor> cls = classname;
			
			if(cls && e.Thing is cls)
				return;
				
			
			string token = "LDLegendaryMonsterTransformed";
			if(ld_dormant && !e.Thing.Target.CountInv(token))
				return;
				
			let info = champion_PersistentInfo(e.Thing.Target.FindInventory("champion_PersistentInfo"));
			if(info)
				{
				let effect = champion_MissileEffect(e.Thing.Spawn("champion_MissileEffect",e.Thing.pos));
				if(effect) 
					{
					effect.master = e.Thing;
					effect.id = info.i;
					effect.frame = info.i;
					}
				}
			}
		
		if(e.Thing.bMISSILE && e.Thing.Target && e.Thing.Target.CountInv("champion_DarkGreenToken") && creepyMissiles)
			{
			string token = "LDLegendaryMonsterTransformed";
			if(ld_dormant && !e.Thing.Target.CountInv(token))
				return;
				
			class<inventory> creeper = (e.Thing.Target.CountInv(token))? 'champion_RedMissileCreep' : 'champion_DarkGreenMissileCreep';
			e.Thing.GiveInventory(creeper,1);
			}
			
		if(e.Thing.bMISSILE && e.Thing.Target && e.Thing.Target.CountInv("champion_WhiteToken") && creepyMissiles)
			{
			string token = "LDLegendaryMonsterTransformed";
			if(ld_dormant && !e.Thing.Target.CountInv(token))
				return;
				
			e.Thing.GiveInventory("champion_WhiteMissileCreep",1);
			}
		
		if(e.Thing && e.Thing.bMISSILE && e.Thing.Target && e.Thing.Target.CountInv("champion_CloneToken"))
			{
			e.Thing.Scale.X = e.Thing.scale.y = e.Thing.Scale.y * 0.75;
			e.Thing.A_Scalevelocity(0.75);
			}
		
		if(e.Thing && e.Thing.bMISSILE && e.Thing.Target && e.Thing.Target.CountInv("champion_YellowToken"))
			{
			string token = "LDLegendaryMonsterTransformed";
			if(ld_dormant && !e.Thing.Target.CountInv(token))
				return;
			
			double factor = 1.5;
			if(ld_boost)
				factor = e.Thing.Target.CountInv(token)? 2.0 : 1.5;
				
			e.Thing.A_ScaleVelocity(factor);
			}
			
		// Triple-split projectiles for titans mutations.
 		if(e.Thing && e.Thing.bMISSILE && !e.Thing.CountInv("champion_TitanToken") && e.Thing.Target && e.Thing.Target.CountInv("champion_TitanToken") )
			{
			let mislx = e.Thing.SpawnMissileAngleZSpeed (	e.Thing.Pos.z, 
															e.Thing.GetClassName(),
															e.Thing.Angle+12.5,
															e.thing.vel.z,
															e.thing.Speed,
															e.Thing.Target,0);
			if(mislx)
				{
				mislx.A_GiveInventory("champion_TitanToken");
				mislx.target = e.Thing.Target;
				mislx.tracer = e.Thing.Tracer;
				}
				
			let misly = e.Thing.SpawnMissileAngleZSpeed (	e.Thing.Pos.z, 
															e.Thing.GetClassName(),
															e.Thing.Angle-12.5,
															e.thing.vel.z,
															e.thing.Speed,
															e.Thing.Target,0);
			if(misly)
				{
				misly.A_GiveInventory("champion_TitanToken");
				misly.target = e.Thing.Target;
				misly.tracer = e.Thing.Tracer;
				} 
			}
			
		// standard monster handling - changes spectres from fuzz to trans
		if(e.Thing && e.Thing.bISMONSTER )
			{
			e.Thing.A_SetRenderstyle(e.Thing.Alpha,STYLE_TRANSLUCENT);
			}
			
		// champion spawning
		if(e.Thing && e.Thing.bISMONSTER 	&&
			e.Thing.bCOUNTKILL 	&&
			!e.Thing.bSPECIAL 	&& 
			!e.Thing.CountInv("champion_NullToken"))
			{
			if(e.Thing.bFRIENDLY && !friendlies)
				return;
	
			int sk = G_SkillPropertyInt(SKILLP_ACSReturn);
			int chance = (4 + (sk*10)) * (sk+1);                                         
			int or = champion_Static.champion_ReturnCVAR("champion_OverrideChance");
			if(or != -1) { chance = or; } 
			
			if(random(0,255) < chance)
				{
				if(champion_WeightedColours.Size() > 0)
					{
					int i = random(0,champion_WeightedColours.Size()-1);
					
					e.Thing.A_GiveInventory("champion_PersistentInfo");
					let info = champion_PersistentInfo(e.Thing.FindInventory("champion_PersistentInfo"));
					
					if(info) 
						{
						info.c = champion_WeightedColours[i]; 
						info.i = champion_ControllerID(champion_WeightedColours[i].GetClassName());
						} 
						
					let	controller = champion_BaseController(new(champion_WeightedColours[i]));
						
					if(controller)
						{
						controller.champion 		= e.Thing;
						
						controller.colours			= colours;
						controller.icons 			= icons;
						controller.particles 		= particles;
						controller.bundles 			= bundles;
						controller.mutationchance 	= mutationchance;
						controller.mutation			= -1;
						controller.legend			= legend;
						controller.ld_dormant		= ld_dormant;
						controller.ld_boost 		= ld_boost;
						
						controller.icon_scale		= icon_scale;
						controller.icon_alpha		= icon_alpha;
						controller.mutation 		= champion_doMutation(e.Thing, champion_WeightedColours[i]);
						}
					}
				}
				
			else if (legend && champion_Static.champion_ReturnCVAR("champion_Legendoom"))
				{
				if(champion_WeightedColours.Size() > 0)
					{
					int i = random(0,champion_WeightedColours.Size()-1);
					let delayer = new("champion_LDoomDelayer");
					if(delayer)
						{
						delayer.holder 			= e.Thing;
						delayer.champColor		= champion_WeightedColours[i];
						delayer.controllerID	= champion_ControllerID(champion_WeightedColours[i].GetClassName());
						
						delayer.colours			= colours;
						delayer.icons 			= icons;
						delayer.particles 		= particles;
						delayer.bundles 		= bundles;
						delayer.mutationchance 	= mutationchance;
						//delayer.mutation		= -1;
						delayer.ld_dormant		= ld_dormant;
						delayer.ld_boost 		= ld_boost;
						delayer.ld_additive		= ld_additive;
						
						delayer.icon_scale		= icon_scale;
						delayer.icon_alpha		= icon_alpha;
						delayer.mutation 		= champion_doMutation(e.Thing, champion_WeightedColours[i]);
						}
					}
				}
			}
		}
		
	int champion_doMutation(actor champion, class<thinker> controller)
		{
		int pick;
			
		if(champion && random(0,255) < mutationChance)
			{
			let info = champion_PersistentInfo(champion.FindInventory("champion_PersistentInfo"));
					
			if(champion && info)
				{
				if(champion && champion_WeightedMutations.Size() > 0)
					{
					pick = champion_WeightedMutations[random(0,champion_WeightedMutations.Size()-1)];
					info.m = pick;
					
					if(pick == mutation_Hybrid)
						{
						pick = champion_DoHybrid(champion, controller);
						info.s = pick;
						}
					return pick;
					}
				return 0;
				}
			return 0;
			}
		return 0;
		}
		
	int champion_DoHybrid(actor champion, class<thinker> controller)
		{
/* 		array<class<thinker> > champion_potentialHybrid;
		champion_potentialHybrid.Copy(champion_WeightedColours);
		
		if(controller is "champion_DarkGreenController")
			{
			for(int i; i < champion_Hybrid_DarkGreenIncompatibility.Size(); i++)
				{
				if(champion_potentialHybrid.Size() > 0)
					{
					while(champion_potentialHybrid.Find(champion_Hybrid_DarkGreenIncompatibility[i]) != champion_potentialHybrid.Size())
						{
						champion_potentialHybrid.Delete(Find(champion_Hybrid_DarkGreenIncompatibility[i]));
						}
					}
				}
			} */
			
		int i = random(0,champion_WeightedColours.Size()-1);
		let secondary = champion_BaseController(new(champion_WeightedColours[i]));
		
		if(secondary)
			{
			secondary.champion 			= champion;
			
			secondary.colours			= false;
			secondary.icons 			= icons;
			secondary.particles 		= particles;
			secondary.bundles 			= bundles;
			secondary.mutationchance 	= 0;
			secondary.legend			= legend;
			secondary.ld_dormant		= ld_dormant;
			secondary.ld_boost 			= ld_boost;
			
			secondary.icon_scale		= icon_scale;
			secondary.icon_alpha		= icon_alpha;
			secondary.mutation 			= 0;
			secondary.secondary			= true;
			}
			
		return mutation_Hybrid;
		}	
	
	Override void WorldThingRevived(WorldEvent e)
		{
		let info = champion_PersistentInfo(e.Thing.FindInventory("champion_PersistentInfo"));
		if(info)
			{
			string token = 'LDLegendaryMonsterTransformed';
			if(legend && ld_dormant && champion_Static.champion_ReturnCVAR("champion_Legendoom") && !e.Thing.CountInv(token))
				return;
				
			let controller = champion_BaseController(new(info.c));
			if(controller)
				{
				controller.mutation 		= info.m;
				controller.champion 		= e.Thing;
				
				controller.colours			= colours;
				controller.icons 			= icons;
				controller.particles 		= particles;
				controller.bundles 			= bundles;
				controller.mutationchance 	= mutationchance;
				controller.legend			= legend;
				//controller.ld_dormant		= ld_dormant;
				controller.ld_boost 		= ld_boost;
				
				controller.icon_scale		= icon_scale;
				controller.icon_alpha		= icon_alpha;
				}
				
			if(info.m == mutation_Hybrid)
				{
				let secondary = champion_BaseController(new(champion_Controllers[info.s]));
				if(controller)
					{
					secondary.champion 			= e.Thing;
					
					secondary.colours			= false;
					secondary.icons 			= icons;
					secondary.particles 		= particles;
					secondary.bundles 			= bundles;
					secondary.mutationchance 	= 0;
					secondary.legend			= legend;
					secondary.ld_dormant		= ld_dormant;
					secondary.ld_boost 			= ld_boost;
					
					secondary.icon_scale		= icon_scale;
					secondary.icon_alpha		= icon_alpha;
					secondary.mutation 			= 0;
					secondary.secondary			= true;
					}
				}
			}
		// if e.Thing is an indigo clone
		if(e.Thing && e.Thing.CountInv("champion_NullToken"))
			{
			e.Thing.A_SpawnItemEx("ArchvileFire");
			e.Thing.Destroy();
			}
		// if e.Thing is a dark red champion
		if(e.Thing && e.Thing.CountInv("champion_DarkRedToken"))
			{
			e.Thing.bSOLID = e.Thing.default.bSOLID;
			e.Thing.bSHOOTABLE = e.Thing.default.bSHOOTABLE;
			e.Thing.bNOTARGET = e.Thing.default.bNOTARGET;
			e.Thing.bNOTAUTOAIMED = e.Thing.default.bNOTAUTOAIMED;
			e.Thing.bNEVERTARGET = e.Thing.default.bNEVERTARGET;
			e.Thing.bINVISIBLE = e.Thing.default.bINVISIBLE;
			e.Thing.A_SpawnItemEx("ArchvileFire");
			}
		}
	
	Override void WorldThingDamaged(WorldEvent e)
		{
		if(e.Thing is "PlayerPawn")
			{
			string token = "LDLegendaryMonsterTransformed";
			if(e.damageSource && ld_dormant && !e.DamageSource.CountInv(token))
				return;
				
			if(e.DamageSource && e.DamageSource.CountInv("champion_WhiteToken"))
				{
				e.Thing.GiveInventory("champion_Slowness1",1);
				}

			if(e.DamageSource && e.DamageSource.CountInv("champion_DarkGreenToken"))
				{
				e.Thing.GiveInventory("champion_Poison",1);
				}
				
			if(e.DamageSource && e.DamageSource.CountInv("champion_CyanToken"))
				{
				double ang = e.Thing.angleTo(e.DamageSource);
				e.Thing.Thrust(24.0,ang-180.0);
				}
				
			}
		if(e.Thing.InStateSequence(e.Thing.CurState, e.Thing.FindState('Ice')) && e.damagetype == "ice" && !e.Thing.bNOICEDEATH)
			{
			e.Thing.A_SetTranslation(ice_trans);
			}
		}
		
	Override void ConsoleProcess(consoleEvent e)
		{
		if(e.Name == 'champions_reset_championweight')
			{
			CVar.GetCVar("champion_weight_DarkRed").ResetToDefault();
			CVar.GetCVar("champion_weight_Red").ResetToDefault();
			CVar.GetCVar("champion_weight_Yellow").ResetToDefault();
			CVar.GetCVar("champion_weight_Orange").ResetToDefault();
			CVar.GetCVar("champion_weight_DarkGreen").ResetToDefault();
			CVar.GetCVar("champion_weight_Green").ResetToDefault();
			CVar.GetCVar("champion_weight_Cyan").ResetToDefault();
			CVar.GetCVar("champion_weight_Blue").ResetToDefault();
			CVar.GetCVar("champion_weight_Indigo").ResetToDefault();
			CVar.GetCVar("champion_weight_Violet").ResetToDefault();
			CVar.GetCVar("champion_weight_Pink").ResetToDefault();
			CVar.GetCVar("champion_weight_Black").ResetToDefault();
			CVar.GetCVar("champion_weight_Grey").ResetToDefault();
			CVar.GetCVar("champion_weight_White").ResetToDefault();
			CVar.GetCVar("champion_weight_Bronze").ResetToDefault();
			CVar.GetCVar("champion_weight_Silver").ResetToDefault();
			CVar.GetCVar("champion_weight_Gold").ResetToDefault();
			}
		}
	}
	
class champion_PoisonBase : Powerup
	{
	override void InitEffect()
		{
		super.InitEffect();
		owner.A_SetBlend("88cc00",0.33,35*5);
		}
		
		
	override void DoEffect()
		{
		super.DoEffect();
		if(owner && level.time % 35 == 0)
			{
			owner.A_DamageSelf(2,"champion_Toxic",src:AAPTR_NULL);
			}
		}
	}

class champion_Poison : PowerupGiver 
	{
	default
		{
		Powerup.Type "champion_PoisonBase";
		//Powerup.Color "88cc00", 0.5;
		Powerup.Duration -3;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		}
	}
	